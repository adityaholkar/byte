<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="10" passed="10" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-03-03T11:44:42 IST" name="Default suite" finished-at="2021-03-03T11:44:42 IST" duration-ms="105">
    <groups>
    </groups>
    <test started-at="2021-03-03T11:44:42 IST" name="Default test" finished-at="2021-03-03T11:44:42 IST" duration-ms="105">
      <class name="ad.testCalculator">
        <test-method is-config="true" signature="init()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="init" finished-at="2021-03-03T11:44:42 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="emptyStringAnswerNull()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="emptyStringAnswerNull" finished-at="2021-03-03T11:44:42 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptyStringAnswerNull -->
        <test-method signature="ignoreNumberGreaterThan1000()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="ignoreNumberGreaterThan1000" finished-at="2021-03-03T11:44:42 IST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ignoreNumberGreaterThan1000 -->
        <test-method signature="multivalueCommaDelimiterAnswer()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="multivalueCommaDelimiterAnswer" finished-at="2021-03-03T11:44:42 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multivalueCommaDelimiterAnswer -->
        <test-method signature="singleValuedAnswer()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="singleValuedAnswer" finished-at="2021-03-03T11:44:42 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- singleValuedAnswer -->
        <test-method signature="supportDifferentDelimeter()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="supportDifferentDelimeter" finished-at="2021-03-03T11:44:42 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- supportDifferentDelimeter -->
        <test-method signature="throwsOnAllNegativeNumberInInput()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="throwsOnAllNegativeNumberInInput" finished-at="2021-03-03T11:44:42 IST" duration-ms="2" status="PASS">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[Negative Number :-3,-5,-13]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: Negative Number :-3,-5,-13
at ad.Calculator.ensureNoNegativeNumberInInput(Calculator.java:38)
at ad.Calculator.sum(Calculator.java:26)
at ad.Calculator.add(Calculator.java:54)
at ad.testCalculator.throwsOnAllNegativeNumberInInput(testCalculator.java:57)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1507)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- throwsOnAllNegativeNumberInInput -->
        <test-method signature="throwsOnNegativeNumber()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="throwsOnNegativeNumber" finished-at="2021-03-03T11:44:42 IST" duration-ms="1" status="PASS">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[Negative Number :-3]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: Negative Number :-3
at ad.Calculator.ensureNoNegativeNumberInInput(Calculator.java:38)
at ad.Calculator.sum(Calculator.java:26)
at ad.Calculator.add(Calculator.java:54)
at ad.testCalculator.throwsOnNegativeNumber(testCalculator.java:52)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1507)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- throwsOnNegativeNumber -->
        <test-method signature="twoValueCommaDelimiterAnswer()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="twoValueCommaDelimiterAnswer" finished-at="2021-03-03T11:44:42 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoValueCommaDelimiterAnswer -->
        <test-method signature="twoValueNewLineDelimiterAnswer()[pri:0, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="twoValueNewLineDelimiterAnswer" finished-at="2021-03-03T11:44:42 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoValueNewLineDelimiterAnswer -->
        <test-method signature="getTotalCountOfAdd()[pri:9, instance:ad.testCalculator@7f1302d6]" started-at="2021-03-03T11:44:42 IST" name="getTotalCountOfAdd" finished-at="2021-03-03T11:44:42 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTotalCountOfAdd -->
      </class> <!-- ad.testCalculator -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
